<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Safety on Jens Rantil</title><link>https://jensrantil.github.io/tags/safety/</link><description>Recent content in Safety on Jens Rantil</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 10 Apr 2025 22:02:57 +0200</lastBuildDate><atom:link href="https://jensrantil.github.io/tags/safety/index.xml" rel="self" type="application/rss+xml"/><item><title>Raise and Release</title><link>https://jensrantil.github.io/posts/raise-and-release/</link><pubDate>Fri, 10 Jan 2025 13:26:35 +0200</pubDate><guid>https://jensrantil.github.io/posts/raise-and-release/</guid><description>&lt;p>Amazon&amp;rsquo;s founder Jeff Besos is famous for his &amp;ldquo;disagree and commit&amp;rdquo; management principle used in leadership. &lt;a href="https://en.wikipedia.org/wiki/Disagree_and_commit" class="external-link" target="_blank" rel="noopener">According to Wikipedia&lt;/a>, it means &amp;ldquo;that individuals are allowed to disagree while a decision is being made, but that once a decision has been made, everybody must commit to implementing the decision&amp;rdquo;.&lt;/p>
&lt;p>I have a slight variation on this which I call &amp;ldquo;Raise and Release&amp;rdquo;, which happens &lt;em>before&lt;/em> a decision has been made. I use this principle particularly when someone proposes something I strongly disagree with &amp;ndash; or know will fail &amp;ndash; but for cases where I can&amp;rsquo;t affect the actual decision. Usually, it is for cases where I am &amp;ldquo;consulted&amp;rdquo; or &amp;ldquo;informed&amp;rdquo; in the &lt;a href="https://en.wikipedia.org/wiki/Responsibility_assignment_matrix" class="external-link" target="_blank" rel="noopener">RACI&lt;/a> sense.&lt;/p></description></item><item><title>Reliability vs. Resilience</title><link>https://jensrantil.github.io/posts/safety-type-1-and-2/</link><pubDate>Tue, 05 Nov 2024 16:19:35 +0200</pubDate><guid>https://jensrantil.github.io/posts/safety-type-1-and-2/</guid><description>&lt;p>In safety systems engineering (SSE) people talk about &amp;ldquo;safety type 1&amp;rdquo; and &amp;ldquo;safety type 2&amp;rdquo;. The first one is about prevention &amp;amp; &lt;strong>reliability&lt;/strong>, the second is about &lt;strong>resilience&lt;/strong>. Type 1 has been around for a long time, and type 2 is &lt;a href="https://www.england.nhs.uk/signuptosafety/wp-content/uploads/sites/16/2015/10/safety-1-safety-2-whte-papr.pdf" class="external-link" target="_blank" rel="noopener">fairly new&lt;/a>.&lt;/p>
&lt;h2 id="prevention-will-not-save-us">
 Prevention will not save us
 &lt;a class="heading-link" href="#prevention-will-not-save-us">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Software systems (and software companies) are complex. And for complex systems, type 1 safety (prevention) will not save us. Three key reasons:&lt;/p></description></item></channel></rss>